# Model Keragaman Spasial  {#sec-keragaman-spasial}

```{r}
#| echo: false

source("_common.R")
```

## Deskripsi

### Regresi Terboboti Geografis

Regresi Terboboti Geografis (RTG) merupakan pengembangan dari kerangka model regresi klasik yang menghasilkan penduga koefisien regresi yang bervariasi untuk setiap lokasi. Semakin jauh suatu lokasi dari lokasi yang diduga model regresinya, semakin rendah bobot untuk data pada lokasi tersebut [@djuraidah2020]. Model RTG dituliskan sebagai berikut [@huang2010]:

$$
y_i = \beta_0 (u_i v_i) + \sum_{k=1}^{p} \beta_k (u_i v_i) x_{ik} + \epsilon_i
$$ {#eq-1101}

dimana:


\begin{align*}

y_i &: \text{nilai pengamatan peubah respon untuk lokasi ke-i} \\
(u_i v_i) &: \text{identifikasi lokasi dari titik ke-i pada suatu lokasi geografis} \\
\beta_0 (u_i v_i) &: \text{intersep pada lokasi pengamatan ke-i} \\
\beta_k (u_i v_i) &: \text{koefisien regresi peubah penjelas ke-k pada lokasi ke-i} \\
x_{ik} &: \text{nilai pengamatan peubah penjelas ke-k pada lokasi ke-i} \\
\epsilon_i &: \text{nilai galat regresi antara peubah penjelas dengan peubah respon di lokasi ke-i} 
  
\end{align*}

@djuraidah2020 menyatakan parameter koefisien regresi $\beta_k (u_i v_i)$ diduga dengan menggunakan metode Kuadrat Terkecil Terboboti, sehingga pendugaan koefisien regresi $\hat{\beta}(u_i v_i)$ dituliskan sebagai berikut:

$$
\hat{\beta}(u_i v_i) = [X'W(u_i v_i)X]^{-1} X' W(u_i v_i) y
$$ {#eq-1102}

dimana $W(u_i v_i)$ adalah matriks $n \times n$ yang merupakan matriks pembobot spasial lokasi ke-$i$ dengan nilai unsur-unsur diagonalnya ditentukan oleh jarak antar lokasi pengamatan ke-$i$ dengan lokasi lainnya.

### Moran Eigenvectors

Vektor eigen moral (MEs) $\{e_1,…,e_L\}$ adalah vektor eigen yang diekstraksi dari dua kali lipat matriks kedekatan spasial terpusat di mana $e_1$ adalah ME yang sesuai dengan nilai eigen terbesar $\lambda_1$, $e_2$ adalah ME yang sesuai dengan nilai eigen terbesar kedua $\lambda_2$, dan seterusnya. MEs dapat diinterpretasikan dalam bentuk koefisien moran (MC; atau Moran I), yang merupakan statistik diagnostik ketergantungan spasial yang menunjukkan nilai positif yang lebih besar dengan adanya ketergantungan spasial positif yang lebih kuat.

Moran Coefficienct (MC) mengkuantifikasi ketergantungan spasial dalam $y$, yaitu $n \times 1$ vektor variabel respon menggunakan persamaan berikut:

$$ 
MC[y] = \frac{n}{1' C1} \frac{(y' MCMy)}{(y' My)} 
$$ {#eq-1103}

Di mana “$'$” menunjukan matrix transpose, 1 adalah $n \times 1$ vektor satuan. $M = I-11'/n$ adalah $n \times n$ matriks pemusatan, di mana $I$ adalah matriks identitas, dan $C$ adalah konektivitas simetris $n \times n$ matriks yang entri diagonalnya 0 [@dray2006].

Akan dilakukan dekomposisi eigen matriks MCM menjadi $E_{\text{full}} \Lambda_{\text{full}} E_{\text{full}}'$, di mana $E_{\text{full}}$ adalah $n \times n$ matriks yang kolom ke-$l$, sama dengan vektor eigen ke-$l$. MC ditunjukkan sebagai berikut:

$$
MC[e_l] = \frac{n}{1' C1} \frac{(e_l' MCMe_l)}{(e_l' Me_l)} = \frac{n}{1' C1} \frac{(e_l' E_{\text{full}} \Lambda_{\text{full}} E_{\text{full}}')}{(e_l' e_l)} = \frac{n}{1' C1} \lambda_l
$$ {#eq-1104}

Persamaan di atas menunjukkan bahwa vektor eigen dapat diinterpretasikan dalam bentuk MC. Secara khusus, vektor eigen ke-1, $e_1$ adalah himpunan bilangan real yang mempunyai nilai MC terbesar yang dapat dicapai dengan himpunan bilangan real apa pun untuk struktur spasial yang ditentukan oleh $C$; $e_2$ adalah himpunan bilangan real yang mempunyai nilai MC terbesar yang dapat dicapai oleh himpunan mana pun yang ortogonal dan tidak berkolerasi dengan $e_1$, dan seterusnya hingga vektor eigen ke-$l$. Jadi, $E_{\text{full}}=\{e_1,…,e_n\}$ menyediakan semua kemungkinan perbedaan deskripsi pola peta ketergantungan spasial laten dengan setiap besaran indeks melalui nilai yang sesuai di $\{\lambda_1,…,\lambda_n\}$ [@griffith2003].

### Pendekatan Regresi Terboboti Geografis Menggunakan Eigenvector Spatial Filtering (ESF)

Pendekatan RTG dapat ditingkatkan dengan memasukkan penyaringan spasial berbasis eigenvector. Ini melibatkan penggunaan kombinasi linear dari eigenvector untuk menangkap asosiasi spasial lokal dan menjelaskan autokorelasi spasial dalam $y_i$ (Griffith, 2008). Salah satu pendekatan yang sering digunakan dalam konteks ini adalah Eigenvector Spatial Filtering (ESF), yang juga disebut koordinat utama matriks ketetanggaan [@dray2006].

ESF didasarkan pada koefisien Moran (MC) dan mampu memetakan vektor ciri spasial untuk mengidentifikasi dan mengukur struktur spasial dalam data. Dengan mengintegrasikan konsep ESF ke dalam pendekatan RTG, model tersebut menjadi lebih efektif dalam memahami dan menggambarkan pola hubungan spasial antar peubah yang diamati. Model ESF Varying Coefficient (VC) dikembangkan berdasarkan model GWR dan Fixed Effect ESF:

$$
y_i = (\beta_0 + \sum_{k_0=1}^{K_0} E_{ik_0} \gamma_{k_0}) + \sum_{p=1}^{P} (\beta_p + \sum_{k_p=1}^{K_p} E_{ik_p} \gamma_{k_p}) X_{ip} + \epsilon_i
$$ {#eq-1105}

yang juga dapat ditulis sebagai:

$$
y = \sum_{p=1}^{P} x_p \odot \beta_p^{ESF} + \epsilon
$$ {#eq-1106}

dimana:

$\beta_p^{ESF} = \beta_p + E_p \gamma_p$ dengan $\epsilon \sim N(0, \sigma^2 I)$

### Random Effect Eigenvector Spatial Filtering Varying Coefficient (RE-ESF VC)

Model Fixed Effect ESF-VC pada awalnya fokus pada penggunaan eigenvector spatial filtering untuk mengendalikan dan mengeksplorasi efek tetap yang terkait dengan variabilitas spasial dalam data. Namun, perkembangan terbaru telah melihat konsep ini dikembangkan menjadi model Random Effect ESF-VC, di mana pendekatan ini tidak hanya mempertimbangkan efek tetap, tetapi juga mampu menangkap variasi acak yang mungkin ada dalam struktur spasial data tersebut. Model RE ESF-VC menurut [@murakami2017] sebagai berikut:

$$
y = \sum_{k=1}^{K} x_k \beta_K^{(RE-ESF)} + \epsilon, \quad \epsilon \sim N(0,\sigma^2 I)
$$ {#eq-1107}

$$
\beta_K^{(RE-ESF)} = \beta_k 1 + E_k \gamma_k, \quad \gamma_k \sim N(0_L,\sigma_{(\gamma,k)}^2 \Lambda_{(\alpha k)})
$$

Di mana $0_L$ adalah vektor nol berukuran $L \times 1$, sedangkan $E$ adalah matriks vektor eigen sepanjang $L$ yang sesuai dengan eigenvalues positif. Dari persamaan sebelumnya, dibuat model lanjutan seperti berikut:

$$
y = X\beta + \tilde{E} \tilde{\Lambda}(\theta) \tilde{u} + \epsilon, \quad \epsilon \sim N(0,\sigma^2 I)
$$ {#eq-1108}

$\tilde{E} = [x_1 \quad E \ldots X_K \quad E]$

Persamaan di atas menunjukkan bahwa model RE-ESF adalah model dengan efek campuran linier. Selain itu, $\beta$ dan $\tilde{u}$ memiliki estimasi linier terbaik tanpa bias sebagai berikut:

$$
\begin{bmatrix} \hat{\beta} \\ \hat{u} \end{bmatrix} = \left[ \begin{array}{cc} X'X & X'\tilde{E}\tilde{\Lambda}(\theta) \\ \tilde{\Lambda}(\theta)(\tilde{E'})X & \tilde{\Lambda}(\theta)(\tilde{E'})\tilde{E}\tilde{\Lambda}(\theta) + I_{KL} \end{array} \right]^{-1} \begin{bmatrix} Xy' \\ \tilde{\Lambda}(\theta) \tilde{E}y' \end{bmatrix} 
$$

Ketika $\theta$ diestimasi secara numerik dengan maksimisasi.

### Transformasi Box-Cox

Draper & Smith (1992) menyatakan bahwa transformasi Box-Cox adalah transformasi pangkat pada variabel respons yang dikembangkan oleh Box dan Cox. Transformasi ini bertujuan memenuhi ketiga asumsi model linier, yaitu keheterogenan ragam, ketaknormalan galat, dan keaditifan/ketaklinieran pengaruh sistematik. Box-Cox menggunakan kriteria yang menggabungkan tujuan memperoleh model yang sederhana dan ragam yang homogen pada satu sisi serta tujuan kenormalan data pada sisi lain.

Transformasi Box-Cox hanya diberlakukan pada variabel respons $Y$ yang bernilai positif. Prosedur utama yang dilakukan pada Transformasi Box-Cox adalah menduga parameter $\lambda$. Dengan mengetahui nilai $\lambda$ pada pengolahan data, kita dapat mengetahui nilai dari transformasi yang digunakan pada model. Pada Tabel, disajikan nilai $\lambda$ dan transformasinya.

| $\lambda$ | Transformasi |
|:-----------:|:------------:|
|     2       |     $Y^2$      |
|     1       |     $Y^1$      |
|    0.5      |   $\sqrt{Y}$  |
|     0       |    $\ln(Y)$   |
|    -0.5     |   $\frac{1}{\sqrt{Y}}$  |
|    -1       |   $\frac{1}{Y}$  |

Dengan menggunakan transformasi Box-Cox akan diperoleh sebaran yang simetrik mendekati Normal. Ketakhomogenan ragam pun dapat dikurangi dengan transformasi ini [@hadi2007].

### Transformasi SAL

Transformasi SAL (SinhArcsinh dan Affine Linear) adalah teknik yang digunakan dalam statistika untuk memodifikasi distribusi data sehingga lebih mendekati distribusi normal atau Gaussian. Transformasi ini berguna ketika data tidak memenuhi asumsi kenormalan yang diperlukan dalam banyak analisis statistik. Rois dan Tober (2019) menjelaskan iterasi transformasi SAL mendekati berbagai macam distribusi non-Gaussian tanpa mengasumsikan distribusi data secara eksplisit.

Lebih lanjut, persamaan SinhArcsinh disajikan sebagai berikut:

$$
\varphi_{\text{arcsinh}}(y) = a + b \text{arcsinh} \left( \frac{y-c}{d} \right) 
$$ {#eq-sinharcsinh}

Di mana $a, c \in \mathbb{R}^+$ dan $b, d \in \mathbb{R}^+$, biasa disebut dengan distribusi Johnson [@johnsonNL1949]. Adapun untuk persamaan Affine sebagai berikut:

$$
\varphi_{\text{affine}}(y) = a + by, \quad a, b \in \mathbb{R}
$$ {#eq-affine}

Sehingga persamaan transformasi SAL adalah:

$$
l(y) = a + b \sinh(c \text{arsinh}(y) - d)
$$ {#eq-sal}

Di mana $a, b, c, d \in \mathbb{R}$.

Melalui penerapan transformasi SAL yang mengombinasikan metode SinhArcsinh dan Affine Linear, dapat membantu mengubah distribusi data yang awalnya tidak normal menjadi lebih mendekati distribusi normal.

### Data

Data yang digunakan berasal dari Badan Pusat Statistik (BPS) pada tahun 2021 dengan observasi sebanyak 514 kabupaten/kota di Indonesia. Tabel berikut menunjukkan deskripsi peubah yang akan digunakan.

| Peubah | Deskripsi                                                  | Satuan                        | Tipe    |
|--------|------------------------------------------------------------|-------------------------------|---------|
| Y      | Indeks Ketahanan Pangan                                    | -                             | Numerik |
| X1     | Persentase penduduk miskin (P0) menurut kabupaten/kota    | Persen                        | Numerik |
| X2     | Pengeluaran per kapita disesuaikan                         | Ribu Rupiah/Orang/Tahun      | Numerik |
| X3     | Umur harapan hidup                                         | Tahun                         | Numerik |
| X4     | Rata-rata lama sekolah penduduk umur 15 tahun ke atas     | Tahun                         | Numerik |
| X5     | Persentase rumah tangga yang memiliki akses terhadap sanitasi layak | Persen             | Numerik |
| X6     | Persentase rumah tangga yang memiliki akses terhadap air minum | Persen                   | Numerik |

## Tahapan Analisis Data

Berikut adalah langkah prosedur analisis yang dilakukan:

1. Eksplorasi data berupa interpretasi pola persebaran Indeks Ketahanan Pangan di Indonesia dan boxplot dari peubah yang digunakan.

2. Pemodelan regresi antara Indeks Ketahanan Pangan terhadap enam peubah penjelas.

3. Pengujian asumsi, yaitu: 
    - Uji normalitas sisaan regresi dengan Uji Liliefors,
    - Uji heterogenitas regresi dengan Uji Breusch-Pagan,
    - Uji multikolinearitas antar peubah penjelas dengan nilai VIF,
    - Uji autokorelasi spasial data dengan Indeks Moran, serta
    - Uji autokorelasi spasial sisaan regresi dengan Global Moran.

4. Penerapan transformasi Box-Cox dan SAL transformation dengan iterasi sebanyak D kali.

5. Pemodelan dengan **Random Effect Eigenvector Spatial Filtering Varying Coefficient** (RE-ESF VC).

6. Interpretasi hasil analisis model RE-ESF VC dengan melihat pola persebaran masing-masing peubah penjelas di Indonesia dan melihat peubah yang signifikan pada kabupaten/kota di Indonesia.

7. Interpretasi hasil estimasi efek marginal dan efek spasial dari model RE-ESF VC.

8. Membandingkan kinerja hasil dari model regresi dan RE-ESF VC dengan nilai residual SE, AIC, BIC, dan adjusted R2.

## Tahapan Analisis Data dengan R

### Package

```{r cache=FALSE, message=FALSE, warning=FALSE}
library(spdep) # Untuk pemodelan dependensi spasial 
library(spatialreg) # Untuk pemodelan dependensi spasial 
library(stats) # Untuk operasi matematis 
library(car) # Untuk menghitung VIF 
library(nortest) # Untuk uji kenormalan 
library(sf) # Untuk menginput peta 
library(ggplot2) # Untuk visualisasi data 
library(tidyr) # Untuk mengolah dataframe 
library(dplyr) # Untuk mengolah dataframe 
library(tidyverse) # Struktur matriks 
library(lmtest) # Uji model linier 
library(spmoran) # ESF 
library(ape) 
library(fitdistrplus)
library(readxl) 
```

### Data dan Peta

```{r}
hasil2 <- readRDS("data/hasil.RDS")
#Input Data 
ikp <- read_excel("data/IKP2022.xlsx") 

# #Import peta SHP 
peta <- read_sf("data/shp/BATAS KABUPATEN KOTA DESEMBER 2019 DUKCAPIL.shp")
```

### Modifikasi Data

```{r}
ikp$KAB_KOTA = toupper(ikp$KAB_KOTA)

#join data to peta
dfix = left_join(peta, ikp, by = "KAB_KOTA")

dfix = na.omit(dfix)

sf::sf_use_s2(FALSE)
longlat = st_coordinates(st_centroid(dfix$geometry))
```

### Plot Spasial

```{r}
#peta ikp
ggplot(dfix) +
  geom_sf(aes(fill = Y)) +
  ggtitle("Indeks Ketahanan Pangan") +
  scale_fill_gradientn(colours = rev(hcl.colors(5, palette = "Emrld")),
                       limits = c(0, max(dfix$Y) + 1)) +
  xlab("") +
  ylab("") +
  labs(fill = "Nilai") + theme_bw() + theme(
    plot.title = element_text(size = 14, face = "bold"),
    legend.title = element_text(size =
                                  14, face = "bold"),
    legend.text = element_text(size =
                                 13),
    legend.key.height = unit(0.32, 'npc')
  )
```

### Boxplot

```{r}
# Boxplot
X = as.data.frame(cbind(
  c(1:length(dfix$X1)),
  dfix$X1,
  dfix$X3,
  dfix$X5,
  dfix$X6,
  dfix$X7,
  dfix$X8
))
colnames(X) <- c("id", paste0("X", 1:6))
head(X)
```


```{r}
X <- pivot_longer(X,
               cols = colnames(X)[-1],
               names_to = 'Variable',
               values_to = 'Value')
head(X)
```


```{r}
ggplot(X, aes(y = Value)) +
  geom_boxplot(
    # custom boxes
    color = "steelblue",
    fill = "steelblue",
    alpha = 0.2,
    # Notch?
    notch = TRUE,
    notchwidth = 0.8,
    # custom outliers
    outlier.colour = "firebrick2",
    outlier.fill = "firebrick2",
    outlier.size = 3
  ) + facet_wrap( ~ Variable,
                  scales = "free",
                  nrow = 1,
                  ncol = 6) +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
  ) +
  theme_bw()
```

### Bobot Spasial

```{r}
#Bobot Spasial
D <- as.matrix(dist(longlat, method = "euclidean"))
#inverse weight matrix
w <- 1 / D
# inverse weight matrix - row-normalized
diag(w) <- 0
wmoran = mat2listw(w, style = "W")
#Uji Moran Indeks (Autokorelasi)
moran.test(dfix$Y, wmoran, zero.policy = T)
```

### Uji Asumsi

```{r}
#Uji asumsi
formula <- Y ~ X1 + X3 + X5 + X6 + X7 + X8
vif(lm(formula, data = dfix))
lillie.test(residuals(lm(formula, data = dfix)))
bptest(lm(formula, data = dfix))
model <- lm(formula, data = dfix)
lm.morantest(model, wmoran, alternative = "two.sided", zero.policy = T)
```

### Histogram

```{r}
# Histogram Normalitas Sebelum Transformasi
hist(
  dfix$Y,
  main = "Histogram",
  col = "steelblue",
  border = "black",
  xlab = "Y"
)
hist(
  residuals(lm(formula, data = dfix)),
  main = "Histogram",
  col = "steelblue",
  border = "black",
  xlab = "Residuals"
)
```

### Identifikasi Model Spasial dan Sebaran

```{r}
#LM Test (Model Spasial)
model <- lm(formula, data = dfix)
lm.morantest(model, wmoran, alternative = "two.sided", zero.policy = T)
#Deteksi Sebaran
descdist(residuals(lm(formula, data = dfix)), boot = 500)
descdist(dfix$Y, boot = 500)
```

### Transformasi dan Pemodelan

```{r}
#| eval: false
# Find transformation D in SAL
hasil2 <- data.frame(
  resid_ad = 0,
  resid_ll = 0,
  y_ad = 0,
  y_ll = 0
)
for (i in 1:25) {
  ng2 <- nongauss_y(y_nonneg = T, tr_num = i)
  #ESF VC
  Y = dfix$Y
  X = cbind(dfix$X1, dfix$X3, dfix$X5, dfix$X6, dfix$X7, dfix$X8)
  X = matrix(X, ncol = ncol(X), nrow = nrow(X))
  meig <- meigen(cmat = w)
  resf_vc <- resf_vc(
    y = Y,
    x = X,
    meig = meig,
    x_sel = FALSE,
    nongauss = ng2
  )
  hasil <- data.frame(
      resid_ad = ad.test(resf_vc$resid)$p.value,
      resid_ll = lillie.test(resf_vc$resid)$p.value,
      y_ad = ad.test(resf_vc$tr_y)$p.value,
      y_ll = lillie.test(resf_vc$tr_y)$p.value
    )
  
  hasil2 <- rbind(hasil2, hasil)
}
```


```{r}
hasil2
```

### Model ESF-VC

```{r}
#RESF VC
ng2 <- nongauss_y(y_nonneg = T, tr_num = 14)
Y = dfix$Y
X = cbind(dfix$X1, dfix$X3, dfix$X5, dfix$X6, dfix$X7, dfix$X8)
X = matrix(X, ncol = ncol(X), nrow = nrow(X))
meig <- meigen(cmat = w)
resf_vc <- resf_vc(
  y = Y,
  x = X,
  meig = meig,
  x_sel = FALSE,
  nongauss = ng2
)
```


```{r}
# Hasil RESF-VC
resf_vc
```

### Hitogram Setelah Transformasi

```{r}
# Histogram sesudah transformasi
hist(
  resf_vc$tr_y,
  main = "Histogram",
  col = "steelblue",
  border = "black",
  xlab = "Y"
)
lillie.test(resf_vc$tr_y)
hist(
  resf_vc$resid,
  main = "Histogram",
  col = "steelblue",
  border = "black",
  xlab = "Residuals"
)
lillie.test(resf_vc$resid)
```

### Peta Signifikansi Peubah Varying Coefficient

```{r}
# Peta Signifikansi Variabel
data_p <- resf_vc$p_vc
data_p$kX1 <- ifelse(data_p$V1 < 0.05, "X1", NA)
data_p$kX2 <- ifelse(data_p$V2 < 0.05, "X2", NA)
data_p$kX3 <- ifelse(data_p$V3 < 0.05, "X3", NA)
data_p$kX4 <- ifelse(data_p$V4 < 0.05, "X4", NA)
data_p$kX5 <- ifelse(data_p$V5 < 0.05, "X5", NA)
data_p$kX6 <- ifelse(data_p$V6 < 0.05, "X6", NA)
data_p2 <- data_p[, c("kX1", "kX2", "kX3", "kX4", "kX5", "kX6")]
data_p$Sig <- apply(data_p2, 1, function(data_p2) {
  filtered_values <- data_p2[is.na(data_p2) == FALSE]
  paste(filtered_values, collapse = ", ")
})
table(data_p$Sig)
```


```{r}
dfix$Signifikansi <- as.factor(data_p$Sig)
ggplot(dfix) +
  geom_sf(aes(fill = Signifikansi)) +
  ggtitle("Signifikansi Peubah Model RE-ESF VC") +
  xlab("") +
  ylab("") +
  labs(fill = "Variabel") + theme_bw() + theme(
    plot.title = element_text(size = 14, face = "bold"),
    legend.title = element_text(size =
                                  14, face = "bold"),
    legend.text = element_text(size =
                                 12),
    legend.key.width = unit(0.10, 'npc')
  )
```

### Peta Koefisien

```{r}
# Peta Koefisien Beta
data_b<-resf_vc$b_vc
dfix$bX1<-data_b$V1
dfix$bX2<-data_b$V2
dfix$bX3<-data_b$V3
dfix$bX4<-data_b$V4
dfix$bX5<-data_b$V5
dfix$bX6<-data_b$V6

# X1
ggplot(dfix) +
  geom_sf(aes(fill = bX1)) +
  ggtitle(expression(bold(
    paste("Koefisien ",  ~ beta[1], " (Persentase Penduduk Miskin)")
  ))) +
  scale_fill_gradientn(colours = rev(hcl.colors(5, palette = "Emrld")),
                       limits = c(min(dfix$bX1), max(dfix$bX1))) +
  xlab("") +
  ylab("") +
  labs(fill = "Nilai") + theme_bw() + theme(
    plot.title = element_text(size = 14, face = "bold"),
    legend.title = element_text(size =
                                  14, face = "bold"),
    legend.text = element_text(size =
                                 16),
    legend.key.height = unit(0.32, 'npc')
  )
```


```{r}
# X2
ggplot(dfix) +
  geom_sf(aes(fill = bX2)) +
  ggtitle(expression(bold(
    paste("Koefisien ", beta[2], " (Pengeluaran Per Kapita)")
  ))) +
  scale_fill_gradientn(colours = rev(hcl.colors(5, palette = "Emrld")),
                       limits = c(min(dfix$bX2), max(dfix$bX2))) +
  xlab("") +
  ylab("") +
  labs(fill = "Nilai") + theme_bw() + theme(
    plot.title = element_text(size = 14, face = "bold"),
    legend.title = element_text(size =
                                  14, face = "bold"),
    legend.text = element_text(size =
                                 16),
    legend.key.height = unit(0.30, 'npc')
  )
```


```{r}
# X3
ggplot(dfix) +
  geom_sf(aes(fill = bX3)) +
  ggtitle(expression(bold(
    paste("Koefisien ", beta[3], " (Umur Harapan Hidup)")
  ))) +
  scale_fill_gradientn(colours = rev(hcl.colors(5, palette = "Emrld")),
                       limits = c(min(dfix$bX3), max(dfix$bX3))) +
  xlab("") +
  ylab("") +
  labs(fill = "Nilai") + theme_bw() + theme(
    plot.title = element_text(size = 14, face = "bold"),
    legend.title = element_text(size =
                                  14, face = "bold"),
    legend.text = element_text(size =
                                 16),
    legend.key.height = unit(0.30, 'npc')
  )
```


```{r}
# X4
ggplot(dfix) +
  geom_sf(aes(fill = bX4)) +
  ggtitle(expression(bold(
    paste(
      "Koefisien ",
      beta[4],
      " (Rata - Rata Lama Sekolah Penduduk 15 Tahun Keatas)"
    )
  ))) +
  scale_fill_gradientn(colours = rev(hcl.colors(5, palette = "Emrld")),
                       limits = c(min(dfix$bX4), max(dfix$bX4))) +
  xlab("") +
  ylab("") +
  labs(fill = "Nilai") + theme_bw() + theme(
    plot.title = element_text(size = 14, face = "bold"),
    legend.title = element_text(size =
                                  14, face = "bold"),
    legend.text = element_text(size =
                                 16),
    legend.key.height = unit(0.30, 'npc')
  )
```


```{r}
# X5
ggplot(dfix) +
  geom_sf(aes(fill = bX5)) +
  ggtitle(expression(bold(
    paste("Koefisien ", beta[5], " (Persentase Akses Sanitasi Layak)")
  ))) +
  scale_fill_gradientn(colours = rev(hcl.colors(5, palette = "Emrld")),
                       limits = c(min(dfix$bX5), max(dfix$bX5))) +
  xlab("") +
  ylab("") +
  labs(fill = "Nilai") + theme_bw() + theme(
    plot.title = element_text(size = 14, face = "bold"),
    legend.title = element_text(size =
                                  14, face = "bold"),
    legend.text = element_text(size =
                                 16),
    legend.key.height = unit(0.30, 'npc')
  )
```


```{r}
# X6
ggplot(dfix) +
  geom_sf(aes(fill = bX6)) +
  ggtitle(expression(bold(
    paste("Koefisien ", beta[6], " (Akses Terhadap Air Minum)")
  ))) +
  scale_fill_gradientn(colours = rev(hcl.colors(5, palette = "Emrld")),
                       limits = c(min(dfix$bX6), max(dfix$bX6))) +
  xlab("") +
  ylab("") +
  labs(fill = "Nilai") + theme_bw() + theme(
    plot.title = element_text(size = 14, face = "bold"),
    legend.title = element_text(size =
                                  14, face = "bold"),
    legend.text = element_text(size =
                                 16),
    legend.key.height = unit(0.30, 'npc')
  )
```


```{r}
# Koefisien Marginal
me<-coef_marginal_vc(resf_vc)
me
```